name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Verify Deno installation
        run: deno --version

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install dependencies
        run: deno cache dev.ts

      - name: Run code formatting check
        run: deno fmt --check

      - name: Run linting
        run: deno lint

      - name: Run type checking
        run: |
          deno check **/*.ts
          deno check **/*.tsx

      - name: Run tests
        env:
          # Test environment variables
          JWT_SECRET: test-secret-key-for-ci-testing-with-sufficient-length-32-bytes
          CLIENT_ID: test-client-id
          CLIENT_SECRET: test-client-secret
          REDIRECT_URI: http://localhost:3000/callback
          CLIENTS: '[{"id":"test-client-id","secret":"test-client-secret","redirectUris":["http://localhost:3000/callback"]}]'
          ISSUER: https://test-issuer.com
          JWT_PUBLIC: test-jwt-public-key
          JWT_KEY_ID: test-key-id
        run: deno test --allow-all --unstable-kv --coverage=cov_profile

      - name: Generate coverage report
        run: deno coverage cov_profile --lcov --output=coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.lcov
          fail_ci_if_error: false

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install dependencies
        run: deno cache dev.ts

      - name: Build application
        env:
          JWT_SECRET: test-secret-key-for-build
          CLIENT_ID: test-client-id
          CLIENT_SECRET: test-client-secret
        run: deno task build

      - name: Test preview build
        env:
          JWT_SECRET: test-secret-key-for-build
          CLIENT_ID: test-client-id
          CLIENT_SECRET: test-client-secret
        run: |
          timeout 10s deno task preview || true
          echo "Preview build test completed"

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Run security tests
        env:
          JWT_SECRET: test-secret-key-for-security-tests-with-sufficient-length-32-bytes
          CLIENT_ID: test-client-id
          CLIENT_SECRET: test-client-secret
          REDIRECT_URI: http://localhost:3000/callback
          CLIENTS: '[{"id":"test-client-id","secret":"test-client-secret","redirectUris":["http://localhost:3000/callback"]}]'
        run: deno test tests/security/ --allow-all --unstable-kv

      - name: Check for sensitive data in environment
        run: |
          # Check that no real secrets are exposed
          echo "Checking for potential security issues..."
          if grep -r "password.*=" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" || true; then
            echo "⚠️  Found potential hardcoded passwords (review manually)"
          fi

      - name: Dependency audit
        run: |
          echo "Checking for known vulnerabilities in dependencies..."
          # Deno has built-in security, but we can check for deprecated imports
          if grep -r "deno.land/std@" . --exclude-dir=node_modules --exclude-dir=.git || true; then
            echo "✅ Using Deno standard library"
          fi
